# 🛍️ FakeStore E-commerce Clone

A complete e-commerce demo built using Python and HTML/CSS/JavaScript that scrapes real-time data from [FakeStore API](https://fakestoreapi.com/) and displays it in a fully responsive modern frontend.

---

## 🚀 Project Overview

This project is a clone of a basic e-commerce store featuring:

- Live product data scraping using Python
- Clean and responsive UI built with HTML and modern CSS
- Dynamic loading of categories and products
- Category filtering, search functionality, and cart interactions
- CSV and JSON export of scraped product data

---

## 📁 Project Structure

```bash
├── main.py                 # Python scraper to fetch product & category data
├── products_data.csv       # (Auto-generated) CSV of all products
├── ecommerce_data.json     # (Auto-generated) Complete scraped data in JSON
├── index.html              # Frontend displaying e-commerce store UI
🧠 Features
🐍 Python Scraper (main.py)
Scrapes product categories and product details from FakeStore API

Saves the data as:

products_data.csv — Cleaned product records

ecommerce_data.json — Structured full dataset with metadata

Adds scraped_at timestamp for tracking data freshness

🌐 Frontend (index.html)
Displays store layout including:

Header, Hero, Categories, Products Grid, Footer

Dynamic rendering of products and categories

Filter products by category

Add-to-cart interaction with counter

Responsive design across devices

⚙️ Setup & Usage
1. Clone the Repository
bash
Copy
Edit
git clone https://github.com/yourusername/fakestore-ecommerce-clone.git
cd fakestore-ecommerce-clone
2. Run the Scraper
Ensure you have Python installed.

bash
Copy
Edit
pip install requests
python main.py
This will generate:

products_data.csv

ecommerce_data.json

3. Launch the Frontend
Simply open index.html in your browser:

bash
Copy
Edit
open index.html    # macOS
start index.html   # Windows
Make sure ecommerce_data.json is in the same directory as index.html.

📊 Sample Output
Metric	Value (Example)
Total Products	20
Categories	4
Data Source	FakeStore API
Data Format	CSV, JSON

📦 Dependencies
Python 3.7+

requests library

Browser with JS support (Chrome, Firefox, etc.)

📸 Screenshots
🖼️ Hero & Header	🗂️ Categories Section	📦 Products Grid

✅ Todo / Enhancements
Add pagination and product details page

Integrate shopping cart logic with backend

Use localStorage for cart persistence

Deploy as a full-stack app (Flask + HTML or React)

