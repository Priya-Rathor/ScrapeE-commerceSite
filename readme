
# üõçÔ∏è MYStore E-commerce Scraper & Storefront

[![Python](https://img.shields.io/badge/Python-3.8%2B-blue.svg)](https://www.python.org/)
[![HTML5](https://img.shields.io/badge/HTML5-Ready-orange.svg)](#)
[![Live Demo](https://img.shields.io/badge/Live-Demo-green)](#)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)

This project demonstrates how to **scrape e-commerce data** from the [FakeStoreAPI](https://fakestoreapi.com/), store it in CSV/JSON format using a Python script, and **render a fully responsive e-commerce storefront** using vanilla HTML, CSS, and JavaScript.

---

## üì¶ Features

- ‚úÖ Scrape product categories & product listings via Python
- ‚úÖ Save data to `products_data.csv` and `ecommerce_data.json`
- ‚úÖ Beautiful modern storefront UI
- ‚úÖ Dynamic product loading from JSON file
- ‚úÖ Filter by category
- ‚úÖ Search products in real time
- ‚úÖ Interactive cart icon & feedback
- ‚úÖ Responsive design for mobile and desktop

---

## üß† Project Structure

```

‚îú‚îÄ‚îÄ main.py                  # Python scraper for product data
‚îú‚îÄ‚îÄ ecommerce\_data.json      # Output JSON used by frontend
‚îú‚îÄ‚îÄ products\_data.csv        # Output CSV
‚îú‚îÄ‚îÄ index.html               # Main storefront website

````

---

## üêç Backend: Python Scraper

### üîß Requirements

Install dependencies:

```bash
pip install requests
````

### ‚ñ∂Ô∏è Usage

Run the script to fetch all categories and products:

```bash
python main.py
```

Output:

* `ecommerce_data.json` ‚Äî structured data for frontend
* `products_data.csv` ‚Äî tabular product export

---

## üåê Frontend: E-commerce Storefront

### üöÄ How to Launch

1. Ensure `ecommerce_data.json` is in the same folder as `index.html`.
2. Open `index.html` in any modern browser (Chrome, Firefox, etc.).

The site will:

* Load scraped product data
* Render live product cards and categories
* Support filtering, search, and cart interactions

---

## üõ†Ô∏è Tech Stack

* **Python 3.8+** (data scraping)
* **Requests** (API calls)
* **HTML5 + CSS3 + Vanilla JS** (frontend rendering)
* **FakeStoreAPI** (mock data source)

---

## üìù Example

![Demo Screenshot](https://i.imgur.com/HhGhkqJ.png)

> Sample output after running the scraper and launching the storefront.

---

## ‚öôÔ∏è Customization

* Modify `main.py` to scrape specific categories
* Extend UI components in HTML for pagination, checkout, etc.
* Integrate with real APIs or databases for production use

---

## üìÅ Output JSON Format (`ecommerce_data.json`)

```json
{
  "metadata": {
    "source": "https://fakestoreapi.com",
    "scraped_at": "2025-07-07T08:00:00",
    "total_products": 20,
    "total_categories": 4
  },
  "categories": [
    "electronics",
    "jewelery",
    "men's clothing",
    "women's clothing"
  ],
  "products": [
    {
      "id": 1,
      "title": "...",
      "price": 29.99,
      ...
    }
  ]
}
```

---

## üìö Learnings

* Practical experience with API integration using Python
* Data processing, transformation, and export
* Frontend rendering using raw JSON
* Building dynamic, responsive UIs without frameworks

---

