#🛍️ FakeStore E-commerce Scraper & Frontend Clone

This is a full-stack portfolio project that demonstrates how to **scrape live e-commerce data** from the [FakeStoreAPI](https://fakestoreapi.com/) using Python, then display it in a **modern, responsive frontend** built with HTML, CSS, and vanilla JavaScript. It features **live filtering**, **search**, **category browsing**, and **metadata summary** — perfect for learning or demos.

---

## 📁 Project Structure

.
├── main.py # Python scraper to fetch products & categories
├── products_data.csv # Exported flat table of product details
├── ecommerce_data.json # Full dataset (JSON with ratings & timestamps)
└── index.html # Interactive frontend (HTML, CSS, JS)

yaml
Copy
Edit

---

## 🚀 Features

### 🔍 Python Scraper (`main.py`)
- Fetches:
  - ✅ All products
  - ✅ Filtered products by category
  - ✅ Category list
- Exports:
  - 🗂️ `products_data.csv` (for analysis)
  - 📦 `ecommerce_data.json` (frontend + full metadata)
- Includes:
  - 📅 Timestamp of scrape
  - ⭐ Rating details (rate & count)
  - ❌ Graceful error handling for API downtime

### 🌐 Interactive Frontend (`index.html`)
- Reads from `ecommerce_data.json`
- 🗂️ **Category filter** (electronics, jewelry, etc.)
- 🔎 **Live search** by product title
- 📊 **Product count & metadata summary**
- 💻 **Responsive layout** (mobile-friendly)
- 🚫 No JS frameworks — pure HTML/CSS/JS

---

## 📸 Demo Screenshots

> *(Add screenshots here if hosted via GitHub Pages or Netlify)*

- Product list with images, title, price
- Category-based filtering UI
- Metadata summary display (count, avg. rating)

---

## 🧠 How It Works

### 1️⃣ Scrape the Data

Run the Python script to fetch fresh product data:

```bash
python main.py
This generates:

products_data.csv — cleaned product table

ecommerce_data.json — full dataset including category, rating, and timestamp

2️⃣ Launch the Frontend
No server needed. Open the HTML file directly:

bash
Copy
Edit
# Either double-click the file
open index.html

# Or use VSCode Live Server / Python HTTP server
python -m http.server
⚠️ Make sure ecommerce_data.json is in the same directory as index.html.

🛠️ Tech Stack
Layer	Tools Used
Scraper	Python, requests, json, csv
Frontend	HTML5, CSS3, JavaScript (Vanilla)
Data Source	FakeStoreAPI

📂 Output Files
File Name	Description
products_data.csv	Flat, analysis-ready table of product records
ecommerce_data.json	Full product data including category, ratings, and timestamp

🧪 Sample Output
json
Copy
Edit
{
  "id": 1,
  "title": "Fjallraven - Foldsack No. 1 Backpack",
  "price": 109.95,
  "description": "...",
  "category": "men's clothing",
  "image": "https://...",
  "rating_rate": 3.9,
  "rating_count": 120,
  "scraped_at": "2025-07-07T09:30:00"
}
✅ Use Cases
🔥 Great portfolio piece to showcase end-to-end development

🐍 Beginner-friendly project for Python scraping

🧪 Education demo for data science or frontend learners

⚙️ Static frontend starter template for product data

💡 Future Enhancements
🔗 Connect frontend to live API using fetch (dynamic JS)

🛒 Add simulated shopping cart + checkout flow

⏳ Add pagination or infinite scroll

🌍 Deploy via GitHub Pages or Netlify

